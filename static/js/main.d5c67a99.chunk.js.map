{"version":3,"sources":["InputForm.js","Leaflet.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","props","handleAPIResults","lat","lng","fetch","then","resp","json","data","setPlaces","results","console","log","catch","err","error","Card","style","margin","height","width","marginBottom","float","Form","onSubmit","event","preventDefault","userAddress","target","elements","formAddress","value","geometry","location","setCoords","Group","controlId","Control","type","placeholder","marginTop","Button","className","variant","Leaflet","Map","center","this","coords","zoom","TileLayer","url","attribution","Marker","position","places","map","place","index","newCoords","Popup","Component","require","config","DisplayPlaces","textAlign","Accordion","Header","Toggle","as","eventKey","name","fontSize","fontWeight","price_level","Collapse","Body","rating","user_ratings_total","vicinity","App","React","useState","getPlaces","setPlace","getCoords","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d5c67a99.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport getDistance from 'geolib/es/getDistance';\r\nimport './InputForm.css';\r\n\r\nconst InputForm = (props) => {\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        let userAddress = \"&address=\" + event.target.elements.formAddress.value;\r\n        let api_url = \"https://maps.googleapis.com/maps/api/geocode/json?&key=\" + process.env.REACT_APP_API_KEY + userAddress;\r\n        fetch(api_url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                handleAPIResults(data.results[0].geometry.location.lat, data.results[0].geometry.location.lng);\r\n                props.setCoords([data.results[0].geometry.location.lat, data.results[0].geometry.location.lng]);\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    const handleAPIResults = (lat, lng) => {\r\n        let loc = \"&location=\" + lat + \",\" + lng;\r\n        let url = \"https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?&opennow&rankby=distance&keyword=restaurant+bar&key=\" + process.env.REACT_APP_API_KEY + loc\r\n\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                props.setPlaces(data.results)\r\n                console.log(data.results)\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    return (\r\n        <Card style={{ margin: \"0 auto\", height: \"10vw\", width: \"50vw\", marginBottom: \"5vh\", float: \"none\" }}>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"formAddress\">\r\n                    <Form.Control type=\"text\" placeholder=\"Enter address\" style={{ margin: \"0 auto\", width: \"40vw\", marginTop: \"2vh\", float: \"none\" }} />\r\n                </Form.Group>\r\n                <Button className=\"submitButton\" variant=\"outline-primary\" type=\"submit\" style={{ marginBottom: \"2vh\", marginTop: \"3vh\" }}>\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InputForm;\r\n","import React, { Component } from 'react'\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport './App.css'\r\n\r\nconst position = [51.505, -0.09]\r\nexport default class Leaflet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"wow\")\r\n        return (\r\n            <Map center={this.props.coords} zoom={13} >\r\n                <TileLayer\r\n                    url=\"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n                <Marker position={this.props.coords} > </Marker>\r\n                {this.props.places.map((place, index) => {\r\n                    console.log(this.props.coords);\r\n                    const lat = place.geometry.location.lat;\r\n                    const lng = place.geometry.location.lng;\r\n                    const newCoords = [lat,lng];\r\n                    return (\r\n                        < div >\r\n                            <Marker position={newCoords} > </Marker>\r\n                        // <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\r\n                        </div>\r\n        );\r\n    })\r\n}\r\n            </Map >\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport InputForm from './InputForm'\r\nimport Leaflet from \"./Leaflet.js\"\r\nrequire('dotenv').config();\r\n\r\nconst DisplayPlaces = (props) => {\r\n  return (\r\n    <Card style={{ margin: \"0 auto\", width: \"50vh\", textAlign: \"left\", float: \"none\" }}>\r\n      <Accordion>\r\n        {props.places.map((place, index) => {\r\n          return (\r\n            <Card>\r\n              <Card.Header>\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey={index}>\r\n                  <div>{place.name}</div>\r\n                  <div style={{ fontSize: \"12px\", textAlign: \"left\", fontWeight: \"bold\" }}>\r\n                    {\r\n                      place.price_level === 4 ? <div>$$$$</div> :\r\n                        place.price_level === 3 ? <div>$$$</div> :\r\n                          place.price_level === 2 ? <div>$$</div> :\r\n                            <div>$</div>\r\n                    }\r\n                  </div>\r\n                </Accordion.Toggle>\r\n              </Card.Header>\r\n              <Accordion.Collapse eventKey={index}>\r\n                <Card.Body>\r\n                  <div style={{ fontSize: \"12px\", textAlign: \"left\" }}>{place.rating} &#9733; ({place.user_ratings_total}) on Yelp</div>\r\n                  <div style={{ fontSize: \"12px\", textAlign: \"left\", fontWeight: \"bold\" }}>{place.vicinity}</div>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          )\r\n        })}\r\n      </Accordion>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [getPlaces, setPlace] = React.useState([]);\r\n  const [getCoords, setCoords] = React.useState();\r\n\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <h1 className=\"header\" style={{ fontWeight: \"bold\", marginTop: \"2vh\" }}>HOOS Eating</h1>\r\n\r\n\r\n      <div style={{ marginTop: \"2vw\" }}><InputForm places={getPlaces} setPlaces={setPlace} setCoords={setCoords} /></div>\r\n      <div><DisplayPlaces places={getPlaces} /></div>\r\n      <Leaflet coords={getCoords} places={getPlaces} />\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}