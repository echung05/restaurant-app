{"version":3,"sources":["InputForm.js","Leaflet.js","Sort.js","DisplayPlaces.js","App.js","serviceWorker.js","index.js"],"names":["convert","require","InputForm","props","React","useState","distance","price","getData","setData","handleAPIResults","lat","lng","dist","console","log","pricing","fetch","then","resp","json","data","setPlaces","results","catch","err","error","Card","style","margin","height","width","marginBottom","float","Form","onSubmit","event","preventDefault","userAddress","target","elements","formAddress","value","geometry","location","setCoords","Label","marginTop","Group","controlId","Control","type","placeholder","Row","Col","marginLeft","rating","onChange","setRating","Number","changeEvent","min","max","step","tooltip","tooltipLabel","val","Math","floor","from","to","DropdownButton","id","title","Dropdown","Item","onSelect","Button","className","variant","Leaflet","coords","Map","center","zoom","TileLayer","url","attribution","Circle","color","fillOpacity","radius","opacity","Popup","places","map","place","index","newCoords","Marker","position","name","user_ratings_total","vicinity","Sort","swap","arr","x","y","temp","handleSortChange","e","sortType","list","len","length","i","j_min","j","sortByRating","price_level","sortByPrice","update","options","label","DisplayPlaces","setValue","textAlign","Accordion","Header","Toggle","as","eventKey","fontSize","fontWeight","Collapse","Body","config","App","getPlaces","setPlace","getCoords","getRating","Container","fluid","md","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3e56cf2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport getDistance from 'geolib/es/getDistance';\r\nimport './InputForm.css';\r\n\r\nlet convert = require('convert-units');\r\n\r\nconst InputForm = (props) => {\r\n\r\n    const [getData, setData] = React.useState({ distance: 0, price: 4 });\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        let userAddress = \"&address=\" + event.target.elements.formAddress.value;\r\n        let api_url = \"https://maps.googleapis.com/maps/api/geocode/json?&key=\" + process.env.REACT_APP_API_KEY + userAddress;\r\n        fetch(api_url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                handleAPIResults(data.results[0].geometry.location.lat, data.results[0].geometry.location.lng);\r\n                props.setCoords([data.results[0].geometry.location.lat, data.results[0].geometry.location.lng]);\r\n            })\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    const handleAPIResults = (lat, lng) => {\r\n        let dist;\r\n        console.log()\r\n        if (getData.distance === 0) {\r\n            dist = \"&rankby=distance\"\r\n        } else {\r\n            dist = \"&radius=\" + getData.distance;\r\n        }\r\n        let pricing = getData.price + dist;\r\n        let loc = \"&location=\" + lat + \",\" + lng + \"&minprice=0&maxprice=\" + pricing;\r\n        let url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?&keyword=restaurant+bar&key=\" + process.env.REACT_APP_API_KEY + loc\r\n\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data => props.setPlaces(data.results))\r\n            .catch(err => console.error(err));\r\n    }\r\n\r\n    const changeEvent = (event) => {\r\n        props.setRating(Number(event.target.value));\r\n    }\r\n\r\n    return (\r\n        <Card style={{ margin: \"0 auto\", height: \"300px\", width: \"70vw\", marginBottom: \"5vh\", float: \"none\" }}>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Label style={{ marginTop: \"2vh\" }}>Enter address to see open restaurants and bars nearby: </Form.Label>\r\n                <Form.Group controlId=\"formAddress\">\r\n                    <Form.Control type=\"text\" placeholder=\"Address\" style={{ margin: \"0 auto\", width: \"40vw\", marginTop: \"2vh\", float: \"none\" }} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formRating\" style={{ width: '60vw', margin: \"0 auto\", float: 'none' }}>\r\n                    <Row >\r\n                        <Col style={{ marginTop: \"0.5vh\", marginLeft: '-12vh' }}><Form.Label>Minimum Rating:</Form.Label></Col>\r\n                        <Col style={{ marginLeft: '-8vh' }}>\r\n                            <RangeSlider value={props.rating}\r\n                                onChange={(event) => changeEvent(event)}\r\n                                min={0} max={5} step={.1} tooltip='auto' tooltipLabel={(val) => val} />\r\n                        </Col>\r\n                        <Col style={{ marginTop: \"0.5vh\" }}><Form.Label>Distance Away (0 = no preference):</Form.Label></Col>\r\n                        <Col style={{ marginLeft: '-1vh' }}>\r\n                            <RangeSlider value={getData.distance}\r\n                                onChange={(event) => setData({ distance: Number(event.target.value) })}\r\n                                min={0} max={50000} step={1000} tooltip='auto' tooltipLabel={(val) => Math.floor(convert(val).from('m').to('mi'))} />\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Group>\r\n                <Form.Group style={{ marginTop: \"5px\" }} controlId=\"formPricing\">\r\n                    <DropdownButton id=\"dropdown-item-button\" title=\"Pricing\">\r\n                        <Dropdown.Item onSelect={() => setData({ ...getData, price: 1 })}>$</Dropdown.Item>\r\n                        <Dropdown.Item onSelect={() => setData({ ...getData, price: 2 })}>$$</Dropdown.Item>\r\n                        <Dropdown.Item onSelect={() => setData({ ...getData, price: 3 })}>$$$</Dropdown.Item>\r\n                        <Dropdown.Item onSelect={() => setData({ ...getData, price: 4 })}>$$$$</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </Form.Group>\r\n                <Button className=\"submitButton\" variant=\"outline-primary\" type=\"submit\" style={{ marginTop: \"1vh\" }}>\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </Card >\r\n    );\r\n}\r\n\r\nexport default InputForm;\r\n","import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer, Circle } from 'react-leaflet';\r\nimport './App.css';\r\n\r\nconst style = {\r\n    margin: \"0 auto\",\r\n    width: '100%',\r\n    height: '500px',\r\n    marginTop: \"5vh\",\r\n    float: \"none\"\r\n}\r\nfunction Leaflet(props) {\r\n    let coords = props.coords;\r\n    return (\r\n        <Map center={coords} zoom={13} style={style}>\r\n            <TileLayer\r\n                url=\"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n            <Circle color='green' fillOpacity={0.3} radius={200} opacity={0.6} center={coords} >\r\n                <Popup>You are in this area!</Popup>\r\n            </Circle>\r\n            {props.places.map((place, index) => {\r\n                let lat = place.geometry.location.lat;\r\n                let lng = place.geometry.location.lng;\r\n                let newCoords = [lat, lng];\r\n                return (\r\n                    < div >\r\n                        {\r\n                            (place.rating >= props.rating) && [\r\n                                <Marker position={newCoords} >\r\n                                    <Popup>\r\n                                        {place.name}\r\n                                        <br />{place.rating}&#9733; ({place.user_ratings_total}) on Yelp  <br />{place.vicinity}\r\n                                    </Popup>\r\n                                </Marker>\r\n                            ]\r\n                        }\r\n                    </div>\r\n                );\r\n            })\r\n            }\r\n        </Map >\r\n    );\r\n}\r\nexport default Leaflet;","import React from 'react';\r\nimport Select from 'react-select';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nconst Sort = props => {\r\n\r\n    const sortByPrice = (list) => {\r\n        const arr = list;\r\n        var len = arr.length;\r\n        for (var i = 0; i < len - 1; i = i + 1) {\r\n            var j_min = i;\r\n            for (var j = i + 1; j < len; j = j + 1) {\r\n                if (arr[j].price_level < arr[j_min].price_level) {\r\n                    j_min = j;\r\n                } else { }\r\n            }\r\n            if (j_min !== i) {\r\n                swap(arr, i, j_min);\r\n            } else { }\r\n        }\r\n        props.setPlaces(arr);\r\n    }\r\n\r\n    const sortByRating = (list) => {\r\n        const arr = list;\r\n        var len = arr.length;\r\n        for (var i = 0; i < len - 1; i = i + 1) {\r\n            var j_min = i;\r\n            for (var j = i + 1; j < len; j = j + 1) {\r\n                if (arr[j].rating > arr[j_min].rating) {\r\n                    j_min = j;\r\n                } else { }\r\n            }\r\n            if (j_min !== i) {\r\n                swap(arr, i, j_min);\r\n            } else { }\r\n        }\r\n        props.setPlaces(arr);\r\n    }\r\n\r\n    const swap = (arr, x, y) => {\r\n        var temp = arr[x];\r\n        arr[x] = arr[y];\r\n        arr[y] = temp;\r\n    }\r\n\r\n    const handleSortChange = (e) => {\r\n        let sortType = e.value;\r\n        if (sortType === 'rating') {\r\n            sortByRating(props.places)\r\n        } else if (sortType === 'prices') {\r\n            sortByPrice(props.places)\r\n        }\r\n        props.update(props.value + 1);\r\n    }\r\n\r\n    const options = [\r\n        { value: 'rating', label: \"Sort by Highest Rated\" },\r\n        { value: 'prices', label: \"Sort by Lowest Price\" },\r\n    ]\r\n    return (\r\n        <div>\r\n            <Select options={options} onChange={event => handleSortChange(event)} />\r\n        </div>\r\n    );\r\n}\r\nexport default Sort;","import React, { useState } from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Sort from './Sort';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\n\r\nconst DisplayPlaces = (props) => {\r\n    const [value, setValue] = useState(1)\r\n    return (\r\n        <div>\r\n            <Sort places={props.places} setPlaces={props.setPlaces} update={setValue} value={value} />\r\n            <Card className=\"scroll\" style={{ margin: \"0 auto\", width: \"50vh\", textAlign: \"left\", float: \"none\" }}>\r\n                <Accordion>\r\n                    {props.places.map((place, index) => {\r\n                        return (\r\n                            <div>\r\n                                {\r\n                                    (place.rating >= props.rating) && [\r\n                                        <Card>\r\n                                            <Card.Header>\r\n                                                <Accordion.Toggle as={Button} variant=\"link\" eventKey={index}>\r\n                                                    <div>{place.name}</div>\r\n                                                    <div style={{ fontSize: \"12px\", textAlign: \"left\", fontWeight: \"bold\" }}>\r\n                                                        {\r\n                                                            place.price_level === 4 ? <div>$$$$</div> :\r\n                                                                place.price_level === 3 ? <div>$$$</div> :\r\n                                                                    place.price_level === 2 ? <div>$$</div> :\r\n                                                                        <div>$</div>\r\n                                                        }\r\n                                                    </div>\r\n                                                </Accordion.Toggle>\r\n                                            </Card.Header>\r\n                                            <Accordion.Collapse eventKey={index}>\r\n                                                <Card.Body>\r\n                                                    <div style={{ fontSize: \"12px\", textAlign: \"left\" }}>{place.rating} &#9733; ({place.user_ratings_total}) on Yelp</div>\r\n                                                    <div style={{ fontSize: \"12px\", textAlign: \"left\", fontWeight: \"bold\" }}>{place.vicinity}</div>\r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                    ]\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </Accordion>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default DisplayPlaces;  ","import React from 'react';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport InputForm from './InputForm';\r\nimport Leaflet from \"./Leaflet.js\";\r\nimport DisplayPlaces from './DisplayPlaces';\r\nimport Sort from './Sort';\r\nrequire('dotenv').config();\r\n\r\nfunction App() {\r\n  const [getPlaces, setPlace] = React.useState([]);\r\n  const [getCoords, setCoords] = React.useState();\r\n  const [getRating, setRating] = React.useState(0);\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <h1 className=\"header\" style={{ fontWeight: \"bold\", marginTop: \"2vh\" }}>HOOS Eating</h1>\r\n\r\n\r\n      <div style={{ marginTop: \"2vw\" }}><InputForm places={getPlaces} setPlaces={setPlace} setCoords={setCoords} setRating={setRating} rating={getRating} /></div>\r\n      {\r\n        (getPlaces.length !== 0) && [\r\n          <Container fluid style={{ marginBottom: \"8vh\" }}>\r\n            <Row>\r\n              <Col md='auto' style={{ marginTop: \"4.5vh\" }}>\r\n                <DisplayPlaces places={getPlaces} rating={getRating} setPlaces={setPlace} />\r\n              </Col>\r\n              <Col>\r\n                <Leaflet coords={getCoords} places={getPlaces} rating={getRating} />\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        ]\r\n      }\r\n\r\n      {/* <Leaflet coords={getCoords} places={getPlaces} />\r\n      <div style={{ marginTop: \"2vh\" }}><DisplayPlaces places={getPlaces} /></div> */}\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}